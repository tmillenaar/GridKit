
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "example_gallery/cell_centric_operations/selecting_cells.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_example_gallery_cell_centric_operations_selecting_cells.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_example_gallery_cell_centric_operations_selecting_cells.py:


.. _example selecting cells:

Cell selection using other grids
================================

Identify specific cells using other grids

Introduction
------------

Grids of different shapes and sizes often interact with each other in predictable ways.
This is demonstrated also in :ref:`example hexagon grids`.
This can be used to identify cells from one grid using an other grid.
This may sound abstract, but in this example images will be provided to show what is meant here.

In this example a grid is created where the cells are colored based on how they relate to a second grid.

Defining matching grids
-----------------------

For two grids to overlap in predictable ways, we need to be mindful of our grid definitions.

Let's create two grids, both centered around zero,
where one grid's cells are exactly three times larger than the other grid's cells.

.. GENERATED FROM PYTHON SOURCE LINES 28-38

.. code-block:: default



    from gridkit.hex_grid import HexGrid
    import numpy

    # create a grids
    fine_grid = HexGrid(size=1, shape="pointy")
    fine_grid._offset = (0, fine_grid.dy/2)
    coarse_grid = HexGrid(size=3*fine_grid.dx, offset=(0, 3*fine_grid.dy/2), shape="pointy")








.. GENERATED FROM PYTHON SOURCE LINES 40-46

Now we have a fine grid, which is the one we want to color,
and we have a course grid which we will use to do this.
First, let's plot the outlines of the two grids so we can verify our grids indeed overlap as expected.
To plot the outlines we can select an area of interest and represent the cells in this area as polygons.
These polygons can then be plotted. Since the grids were defined to be centered around zero,
let's center our are of interest around zero as well.

.. GENERATED FROM PYTHON SOURCE LINES 47-59

.. code-block:: default


    # define an area of interest, slightly larger than what we want to plot
    bounds = (-7, -7, 7, 7)

    fine_bounds = fine_grid.align_bounds(bounds)
    fine_cell_ids = fine_grid.cells_in_bounds(fine_bounds)[0]
    fine_shapes = fine_grid.to_shapely(fine_cell_ids, as_multipolygon=True)

    coarse_bounds = coarse_grid.align_bounds(bounds)
    coarse_cell_ids = coarse_grid.cells_in_bounds(coarse_bounds)[0]
    coarse_shapes = coarse_grid.to_shapely(coarse_cell_ids, as_multipolygon=True)








.. GENERATED FROM PYTHON SOURCE LINES 60-61

Now let's define a plotting function that can either plot the outline of each cell or fill it with a color.

.. GENERATED FROM PYTHON SOURCE LINES 62-71

.. code-block:: default


    import matplotlib.pyplot as plt

    def plot_shapes(shapes, color, fill=False, **kwargs):
        """Simple function to plot polygons with matplotlib"""
        plot_func = plt.fill if fill else plt.plot
        for geom in shapes.geoms:
            plot_func(*geom.exterior.xy, color=color, **kwargs)








.. GENERATED FROM PYTHON SOURCE LINES 72-73

Let's use this to plot our grids in the same image so we can compare them.

.. GENERATED FROM PYTHON SOURCE LINES 74-83

.. code-block:: default


    plot_shapes(fine_shapes, linewidth=1, color="purple")
    plot_shapes(coarse_shapes, linewidth=2, color="orange")

    plt.xlim(-4.5,4.5)
    plt.ylim(-4.5,4.5)
    plt.show()





.. image-sg:: /example_gallery/cell_centric_operations/images/sphx_glr_selecting_cells_001.png
   :alt: selecting cells
   :srcset: /example_gallery/cell_centric_operations/images/sphx_glr_selecting_cells_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 84-91

The grids seem to align nicely. Also, there are exactly three purple cells
between two orange cell edges, as intended.
Arguably, there are three categories of purple cells when compared to the orange grid.
The first category contains the purple cells at the center of each of the orange cells.
Secondly we have the neighbours of these center cells and lastly we have the purple cells at the 
vertices of the orange cells.
Let's start by coloring in the center cells.

.. GENERATED FROM PYTHON SOURCE LINES 92-105

.. code-block:: default


    coarse_centroids = numpy.array([geom.centroid.xy for geom in coarse_shapes.geoms])
    center_cells = fine_grid.cell_at_point(coarse_centroids[:,:,0])
    center_shapes = fine_grid.to_shapely(center_cells, as_multipolygon=True)

    plot_shapes(fine_shapes, linewidth=1, color="purple")
    plot_shapes(center_shapes, fill=True, color="limegreen", alpha=0.6)
    plot_shapes(coarse_shapes, linewidth=2, color="orange")

    plt.xlim(-4.5,4.5)
    plt.ylim(-4.5,4.5)
    plt.show()




.. image-sg:: /example_gallery/cell_centric_operations/images/sphx_glr_selecting_cells_002.png
   :alt: selecting cells
   :srcset: /example_gallery/cell_centric_operations/images/sphx_glr_selecting_cells_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 106-107

Next, let's use these center cells to find their neighbours and color them too.

.. GENERATED FROM PYTHON SOURCE LINES 108-122

.. code-block:: default


    center_neighbour_cells = fine_grid.neighbours(center_cells)
    center_neighbour_cells = center_neighbour_cells.reshape((-1,2)) # flatten
    center_neighbour_shapes = fine_grid.to_shapely(center_neighbour_cells, as_multipolygon=True)

    plot_shapes(fine_shapes, linewidth=1, color="purple")
    plot_shapes(center_shapes, fill=True, color="limegreen", alpha=0.6)
    plot_shapes(center_neighbour_shapes, fill=True, color="sandybrown", alpha=0.6)
    plot_shapes(coarse_shapes, linewidth=2, color="orange")

    plt.xlim(-4.5,4.5)
    plt.ylim(-4.5,4.5)
    plt.show()




.. image-sg:: /example_gallery/cell_centric_operations/images/sphx_glr_selecting_cells_003.png
   :alt: selecting cells
   :srcset: /example_gallery/cell_centric_operations/images/sphx_glr_selecting_cells_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 123-125

Lastly, let's find coordinates of the vertices of the orange cells.
We then find what purple cells are a these coordinates and color them as well.

.. GENERATED FROM PYTHON SOURCE LINES 126-142

.. code-block:: default


    vertices = coarse_grid.cell_corners(coarse_cell_ids).reshape((-1,2))
    vertices_cells = fine_grid.cell_at_point(vertices)
    vertices_cells = numpy.unique(vertices_cells, axis=0) # drop duplicate ids
    vertices_shapes = fine_grid.to_shapely(vertices_cells, as_multipolygon=True)

    plot_shapes(fine_shapes, linewidth=1, color="purple")
    plot_shapes(center_shapes, fill=True, color="limegreen", alpha=0.6)
    plot_shapes(center_neighbour_shapes, fill=True, color="sandybrown", alpha=0.6)
    plot_shapes(vertices_shapes, fill=True, color="darkcyan", alpha=0.6)
    plot_shapes(coarse_shapes, linewidth=2, color="orange")

    plt.xlim(-4.5,4.5)
    plt.ylim(-4.5,4.5)
    plt.show()




.. image-sg:: /example_gallery/cell_centric_operations/images/sphx_glr_selecting_cells_004.png
   :alt: selecting cells
   :srcset: /example_gallery/cell_centric_operations/images/sphx_glr_selecting_cells_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 143-144

Now the purple grid is colored, based on it's relation to the orange grid.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.821 seconds)


.. _sphx_glr_download_example_gallery_cell_centric_operations_selecting_cells.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: selecting_cells.py <selecting_cells.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: selecting_cells.ipynb <selecting_cells.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
