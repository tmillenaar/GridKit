
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "example_gallery/vector_synergy/interpolate_from_points.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_example_gallery_vector_synergy_interpolate_from_points.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_example_gallery_vector_synergy_interpolate_from_points.py:


Interpolate from points
=======================

Fill a BoundedGrid based on point data

Introduction
------------

In this example a BoundedGrid is created from a set of points by interpolating between the points.
For this operation we need:

#. locations of the points
#. values of the points
#. a grid to interpolate on

In this example, we simulate the point data using a 2d sinusoidal equation.
We sample the equation at pseudo-random locations.

.. GENERATED FROM PYTHON SOURCE LINES 21-32

.. code-block:: default



    import numpy

    numpy.random.seed(0)
    x = 100 * numpy.random.rand(100)
    numpy.random.seed(1)
    y = 100 * numpy.random.rand(100)
    values = numpy.sin(x/(10*numpy.pi)) * numpy.sin(y/(10*numpy.pi))
    points = numpy.array([x,y]).T








.. GENERATED FROM PYTHON SOURCE LINES 34-35

This input data looks as follows:

.. GENERATED FROM PYTHON SOURCE LINES 36-43

.. code-block:: default


    import matplotlib.pyplot as plt
    plt.scatter(x,y,c=values)
    plt.colorbar()
    plt.title("Simulated input values")
    plt.show()




.. image-sg:: /example_gallery/vector_synergy/images/sphx_glr_interpolate_from_points_001.png
   :alt: Simulated input values
   :srcset: /example_gallery/vector_synergy/images/sphx_glr_interpolate_from_points_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 44-45

Now we can create a grid and interpolate onto that grid.

.. GENERATED FROM PYTHON SOURCE LINES 46-52

.. code-block:: default


    from gridkit import hex_grid

    empty_grid = hex_grid.HexGrid(size=6, shape="pointy")
    data_grid = empty_grid.interp_from_points(points, values)








.. GENERATED FROM PYTHON SOURCE LINES 53-56

Currently the interpolation methods "nearest", "linear" and "cubic" are supported,
based on scpiy's ``NearestNDInterpolator``, ``LinearNDInterpolator`` and ``CloughTocher2DInterpolator``, respectively.
Here we try each method and plot them next to each other to compare.

.. GENERATED FROM PYTHON SOURCE LINES 57-96

.. code-block:: default

    import matplotlib.pylab as pl
    from matplotlib.patches import Rectangle
    fig, axes = plt.subplots(1, 3, sharey=True, figsize=(12, 5))

    for ax, method in zip(axes, ("nearest", "linear", "cubic")):

        data_grid = empty_grid.interp_from_points(
            points,
            values,
            method=method,
        )

        # create colormap that matches our values
        cmap = getattr(pl.cm, "viridis")
        vals = data_grid.data.ravel()
        vmin = numpy.nanmin(vals)
        values_normalized = vals - vmin
        vmax = numpy.nanmax(values_normalized)
        values_normalized = values_normalized / vmax
        colors = cmap(values_normalized)
        colors[numpy.all(colors == 0, axis=1)] += 1 # turn black (nodata) to white
    
        # plot each cell as a polygon with color
        for geom, color in zip(data_grid.to_shapely(), colors):
            ax.fill(*geom.exterior.xy, alpha=1.0, color=color)

        # plot original data
        ax.scatter(x, y, c=values, edgecolors='black')

        # add outline of the grid bounds
        b = data_grid.bounds
        rect = Rectangle((b[0],b[1]),b[2]-b[0],b[3]-b[1],linewidth=1,edgecolor='r',facecolor='none')
        ax.add_patch(rect)

        ax.set_title(method, fontdict={'fontsize': 30})

    fig.tight_layout()
    plt.show()




.. image-sg:: /example_gallery/vector_synergy/images/sphx_glr_interpolate_from_points_002.png
   :alt: nearest, linear, cubic
   :srcset: /example_gallery/vector_synergy/images/sphx_glr_interpolate_from_points_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 97-102

In this example, the `cubic` interpolation represents the original function the best, but this will differ per usecase.
Note how the BoundedGrid has nodata values at the border in the "linear" and "cubic" cases.
The bounds of the grid are automatically chosen to align with the supplied grid and accommodate all points.
Cells of which the center is not within the convex hull of the data,
but are within the selected bounds, get a `nodata_value` as specified in ``interp_from_points`` (default numpy.nan).


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.583 seconds)


.. _sphx_glr_download_example_gallery_vector_synergy_interpolate_from_points.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: interpolate_from_points.py <interpolate_from_points.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: interpolate_from_points.ipynb <interpolate_from_points.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
